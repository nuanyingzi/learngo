Index: package/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\r\n\r\nimport \"fmt\"\r\n\r\n// 包的执行顺序\r\n\r\nvar x int8 = 10\r\n\r\nconst pi = 3.14\r\n\r\nfunc init() {\r\n\tfmt.Println(\"x:\", x)\r\n\tfmt.Println(\"pi:\", pi)\r\n\tsayHi(\"world\")\r\n}\r\n\r\nfunc sayHi(name string) {\r\n\tfmt.Println(\"Hello \", name)\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println(\"你好，世界\")\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/package/main.go b/package/main.go
--- a/package/main.go	(revision cb35df673bf762abb64044c0ebf8d9ddf530f514)
+++ b/package/main.go	(date 1653702814968)
@@ -1,6 +1,6 @@
 package main
 
-import "fmt"
+import f "fmt"
 
 // 包的执行顺序
 
@@ -9,15 +9,15 @@
 const pi = 3.14
 
 func init() {
-	fmt.Println("x:", x)
-	fmt.Println("pi:", pi)
+	f.Println("x:", x)
+	f.Println("pi:", pi)
 	sayHi("world")
 }
 
 func sayHi(name string) {
-	fmt.Println("Hello ", name)
+	f.Println("Hello ", name)
 }
 
 func main() {
-	fmt.Println("你好，世界")
+	f.Println("你好，世界")
 }
Index: channel/channel_manyres/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/channel/channel_manyres/main.go b/channel/channel_manyres/main.go
new file mode 100644
--- /dev/null	(date 1653702873235)
+++ b/channel/channel_manyres/main.go	(date 1653702873235)
@@ -0,0 +1,87 @@
+package main
+
+import "fmt"
+
+func f2(ch chan int) {
+	for {
+		v, ok := <-ch
+		if !ok {
+			fmt.Println("通道已关闭")
+			break
+		}
+		fmt.Printf("v:%#v, ok:%#v\n", v, ok)
+	}
+}
+
+func f3(ch chan int) {
+	for v := range ch {
+		fmt.Println(v)
+	}
+}
+
+// Producer 返回一个通道
+// 并持续将符合条件的数据发送至返回的通道中
+// 数据发送完成后会将返回的通道关闭
+func Producer() chan int {
+	ch := make(chan int, 2)
+	// 创建一个新的goroutine执行发送数据的任务
+	go func() {
+		for i := 0; i < 10; i++ {
+			if i%2 == 1 {
+				ch <- i
+			}
+		}
+		close(ch) // 任务完成后关闭通道
+	}()
+	return ch
+}
+
+// Producer2 返回一个接收通道
+func Producer2() <-chan int {
+	ch := make(chan int, 2)
+	// 创建一个新的goroutine执行发送数据的任务
+	go func() {
+		for i := 0; i < 10; i++ {
+			if i%2 == 1 {
+				ch <- i
+			}
+		}
+		close(ch) // 任务完成后关闭通道
+	}()
+	return ch
+}
+
+// Consumer 从通道中接收数据进行计算
+func Consumer(ch chan int) int {
+	sum := 0
+	for v := range ch {
+		sum += v
+	}
+	return sum
+}
+
+// Consumer2 参数为接收通道
+func Consumer2(ch <-chan int) int {
+	sum := 0
+	for v := range ch {
+		sum += v
+	}
+	return sum
+}
+
+func main() {
+	/*ch := make(chan int, 2)
+	ch <- 1
+	ch <- 2
+	close(ch)
+	//f2(ch)
+	f3(ch)*/
+
+	ch := Producer()
+	res := Consumer(ch)
+	fmt.Println(res)
+
+	ch2 := Producer2()
+	res2 := Consumer2(ch2)
+	fmt.Println(res2)
+}
Index: TCP/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TCP/main.go b/TCP/main.go
new file mode 100644
--- /dev/null	(date 1653702873242)
+++ b/TCP/main.go	(date 1653702873242)
@@ -0,0 +1,44 @@
+package main
+
+import (
+	"bufio"
+	"fmt"
+	"net"
+)
+
+// tcp/server/main.go
+
+// TCP server端
+
+// 处理函数
+func process(conn net.Conn) {
+	defer conn.Close() // 关闭连接
+	for {
+		reader := bufio.NewReader(conn)
+		var buf [128]byte
+		n, err := reader.Read(buf[:]) // 读取数据
+		if err != nil {
+			fmt.Println("read from client failed, err:", err)
+			break
+		}
+		recvStr := string(buf[:n])
+		fmt.Println("收到client端发来的数据：", recvStr)
+		conn.Write([]byte(recvStr)) // 发送数据
+	}
+}
+
+func main() {
+	listen, err := net.Listen("tcp", "127.0.0.1:20001")
+	if err != nil {
+		fmt.Println("listen failed, err:", err)
+		return
+	}
+	for {
+		conn, err := listen.Accept() // 建立连接
+		if err != nil {
+			fmt.Println("accept failed, err:", err)
+			continue
+		}
+		go process(conn) // 启动一个goroutine处理连接
+	}
+}
Index: channel/channel_demo/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/channel/channel_demo/main.go b/channel/channel_demo/main.go
new file mode 100644
--- /dev/null	(date 1653702873251)
+++ b/channel/channel_demo/main.go	(date 1653702873251)
@@ -0,0 +1,22 @@
+package main
+
+import "fmt"
+
+// channel
+
+func retc(c chan int) {
+	ret := <-c
+	fmt.Println("接收成功", ret)
+}
+func main() {
+	// 无缓冲的通道
+	ch := make(chan int)
+	go retc(ch) // 创建一个goroutine从通道接收值
+	ch <- 10
+	fmt.Println("发送成功")
+
+	// 有缓冲的通道
+	ch2 := make(chan int, 1) // 创建一个容量为1的有缓冲区通道
+	ch2 <- 10
+	fmt.Println("发送成功")
+}
